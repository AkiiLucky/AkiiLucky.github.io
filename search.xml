<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>零钱兑换问题</title>
      <link href="/2022/09/08/algorithm-03/"/>
      <url>/2022/09/08/algorithm-03/</url>
      
        <content type="html"><![CDATA[<h1 id="零钱兑换问题"><a href="#零钱兑换问题" class="headerlink" title="零钱兑换问题"></a>零钱兑换问题</h1><h2 id="零钱兑换-I"><a href="#零钱兑换-I" class="headerlink" title="零钱兑换 I"></a>零钱兑换 I</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回&nbsp;-1 。</p><p>你可以认为每种硬币的数量是无限的。</p><p>&nbsp;</p><p>示例&nbsp;1：</p><p>输入：coins = [1, 2, 5], amount = 11<br>输出：3<br>解释：11 = 5 + 5 + 1<br>示例 2：</p><p>输入：coins = [2], amount = 3<br>输出：-1<br>示例 3：</p><p>输入：coins = [1], amount = 0<br>输出：0&nbsp;</p><p>提示：</p><p>1 &lt;= coins.length &lt;= 12<br>1 &lt;= coins[i] &lt;= 231 - 1<br>0 &lt;= amount &lt;= 104</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/coin-change">https://leetcode.cn/problems/coin-change</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>方法：动态规划</p><p>状态定义：用 dp[i] 表示使用 coins 中的所有硬币能够组合出金额 i 的最少硬币数量</p><p>状态转移：</p><ul><li>dp[i] = min(dp[i - coin_1], dp[i - coin_2] , … , dp[i - coin_n]) + 1</li><li>coin_1 表示第1种硬币的金额，coin_2 表示第 2 种硬币的金额，coin_n 表示第 n 种硬币的金额</li></ul><p>边界条件：</p><ul><li>dp[0] = 0 组合出金额 0 最少使用 0 个硬币</li><li>如果 i - coin 小于零，那么无法组合出负的金额，将 dp[i - coin] 设为 -1</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//方法 动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//dp[i]表示使用coins能够组合出金额i的最少硬币数量</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> min_val <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> coin <span class="token operator">:</span> coins<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token comment">//遍历coins，求出组合出金额i-coin的最小硬币数量</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-</span>coin<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coin<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    min_val <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>min_val<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min_val <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">//不可以组合出金额i，dp[i]设为-1</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment">//可以组合出金额i，硬币数量+1</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min_val<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="零钱兑换-II"><a href="#零钱兑换-II" class="headerlink" title="零钱兑换 II"></a>零钱兑换 II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。</p><p>请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。</p><p>假设每一种面额的硬币有无限个。&nbsp;</p><p>题目数据保证结果符合 32 位带符号整数。</p><p>&nbsp;</p><p>示例 1：</p><p>输入：amount = 5, coins = [1, 2, 5]<br>输出：4<br>解释：有四种方式可以凑成总金额：<br>5=5<br>5=2+2+1<br>5=2+1+1+1<br>5=1+1+1+1+1<br>示例 2：</p><p>输入：amount = 3, coins = [2]<br>输出：0<br>解释：只用面额 2 的硬币不能凑成总金额 3 。<br>示例 3：</p><p>输入：amount = 10, coins = [10]<br>输出：1&nbsp;</p><p>提示：</p><p>1 &lt;= coins.length &lt;= 300<br>1 &lt;= coins[i] &lt;= 5000<br>coins 中的所有值 互不相同<br>0 &lt;= amount &lt;= 5000</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/coin-change-2">https://leetcode.cn/problems/coin-change-2</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>方法：动态规划<br>状态定义：用dp[i]表示使用coins[0]…coins[n-1]可以组合出金额 i 的组合数<br>初始条件：dp[0] = 1，组合出金额 0 的组合数只有 1 种<br>状态转移：dp[i] = sum(dp[i - coin]) ，coin表示coins中的每种硬币金额</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//dp[i]表示使用coins[0]...coins[n-1]可以组合出金额 i 的组合数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> coin <span class="token operator">:</span> coins<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-</span>coin <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coin<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库笔记</title>
      <link href="/2022/09/06/database-notes/"/>
      <url>/2022/09/06/database-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库笔记"><a href="#数据库笔记" class="headerlink" title="数据库笔记"></a>数据库笔记</h1><hr><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="DBMS（数据库管理系统）"><a href="#DBMS（数据库管理系统）" class="headerlink" title="DBMS（数据库管理系统）"></a>DBMS（数据库管理系统）</h3><p>DBMS是一个存储数据的系统，同时为软件提供数据访问。</p><p>目标：</p><ul><li><p>海量数据 (massive)</p><ul><li>异构（图片，声音，鼠标点击）</li><li>数据存放在外存</li></ul></li><li><p>持续存储（persistent）</p></li><li><p>安全（safe）</p><ul><li>避免丢失，被覆盖</li></ul></li><li><p>多用户（multable user）</p><ul><li>多用户可以访问数据的不同部分</li><li>数据一致性<ul><li>并发控制</li><li>一致性和性能之间的权衡 </li></ul></li></ul></li><li><p>方便（convenient）</p><ul><li>便于处理大量数据</li><li><strong>物理数据独立性：数据的存储、布局方式与程序逻辑（程序访问数据）无关</strong></li><li>SQL查询语言</li></ul></li><li><p>高效（efficient）</p></li><li><p>可靠（reliable）</p><ul><li>随时可用</li><li>备份</li></ul></li></ul><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>描述数据结构，数据上的操作，数据的约束的集合</p><ul><li>关系型数据模型（结构化）</li><li>半结构数据模型（例：xml）</li><li>图数据模型</li></ul><h3 id="模式（schema）"><a href="#模式（schema）" class="headerlink" title="模式（schema）"></a>模式（schema）</h3><p>定义数据库的结构，数据的类型<br>模式不经常更改，而数据更改很快<br><strong>模式也是一种数据（数据的数据，元数据）</strong></p><h3 id="DDL-DML"><a href="#DDL-DML" class="headerlink" title="DDL,DML"></a>DDL,DML</h3><ul><li>DDL</li><li>DML</li></ul><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="关系数据模型"><a href="#关系数据模型" class="headerlink" title="关系数据模型"></a>关系数据模型</h3><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>关系是两个或两个以上集合的笛卡尔积的子集</p><ul><li>一种集合</li><li>笛卡尔积<ul><li>设 A = {a1,a2,…}, B = {b1,b2,…}</li><li>A 和 B 的笛卡尔积 A x B = { &lt;a,b&gt; | a属于A, b属于B}</li></ul></li><li>关系是各个属性集的笛卡尔积的子集</li></ul><h4 id="关系数据模型的组件"><a href="#关系数据模型的组件" class="headerlink" title="关系数据模型的组件"></a>关系数据模型的组件</h4><ul><li>数据库是有名字的关系（表）的集合</li><li>每张表（关系）拥有若干属性（列）</li><li>每个元组（行）在每个属性（列）上都有一个值</li><li>每个属性（列）都有类型</li></ul><h4 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h4><ul><li>schema（模式，属性集） 描述数据库中的关系，不经常变化</li><li>instance（实例） 给定时间点的实际内容，随时间变化</li><li>NULL 未知或未定义</li><li>key（键） 所有元组拥有唯一取值的属性的或独一五二的属性的集合</li></ul><h4 id="创建和使用关系数据库"><a href="#创建和使用关系数据库" class="headerlink" title="创建和使用关系数据库"></a>创建和使用关系数据库</h4><ul><li>使用 DDL 设计模式（schema）</li><li>使用 ETL 工具对数据操作<ul><li>提取</li><li>变换</li><li>加载</li></ul></li><li>重复执行查询和修改</li></ul><h4 id="查询的结果"><a href="#查询的结果" class="headerlink" title="查询的结果"></a>查询的结果</h4><p>关系数据库中任何查询的结果是<strong>关系</strong></p><p>解释：</p><ul><li>在上一次的查询结果上可以进行组合查询</li><li>封闭的 （查询的对象是关系，结果也是关系）</li></ul><h4 id="查询语言"><a href="#查询语言" class="headerlink" title="查询语言"></a>查询语言</h4><ul><li>关系代数 （人来查询）</li><li>SQL （机器来查询）</li></ul><p>这两种查询语言在功能上等价</p><hr><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p>最简单的查询：一张表的所有元组</p><p>代数的核心：<strong>表达式</strong></p><p>一个单独的关系是一个表达式，嵌套了关系运算符的表达式仍是表达式</p><p>关系代数表达式有值，最基本的表达式就是关系名</p><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><ul><li><p>选择（select）运算符：σ </p><ul><li>σ Cond (Relation) Cond:条件，Relation: 关系</li><li>作用：选择某些行</li></ul></li><li><p>投影（project）运算符： π </p><ul><li> π A1,…,An (Relation) A:列名</li><li>作用：选择某些列，<strong>结果没有重复的行（这里与SQL不同）</strong></li></ul></li><li><p>连结（join）运算符：×</p><ul><li>tableA × tableB</li><li>作用：两个关系的组合 结果的行数等于tableA的行数与tableB的乘积</li></ul></li><li><p>自然连接：⋈</p><ul><li>对具有相同名称的属性取值要相等</li><li>消去重复属性</li></ul></li><li><p>θ 连接：默认的连接</p></li></ul><h3 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h3><ul><li>并集：∪<ul><li>垂直方向上对元组进行组合，使元组个数增加</li></ul></li><li>差集：A - B<ul><li>A 中有但 B 中没有</li></ul></li><li>交集：∩<ul><li>可以由差集构造出来 A ∩ B 等价于 A - ( A - B )</li></ul></li></ul><p>schema(A) = schema(B) 时，A ∩ B 相当于 A ⋈ B</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP笔记</title>
      <link href="/2022/09/05/nlp-01/"/>
      <url>/2022/09/05/nlp-01/</url>
      
        <content type="html"><![CDATA[<h1 id="自然语言处理（NLP）"><a href="#自然语言处理（NLP）" class="headerlink" title="自然语言处理（NLP）"></a>自然语言处理（NLP）</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="语言的定义"><a href="#语言的定义" class="headerlink" title="语言的定义"></a>语言的定义</h3><ul><li>符号</li><li>规则</li></ul><h3 id="自然语言"><a href="#自然语言" class="headerlink" title="自然语言"></a>自然语言</h3><ul><li>文字</li><li>语法</li></ul><h3 id="文字语言"><a href="#文字语言" class="headerlink" title="文字语言"></a>文字语言</h3><ul><li>形式语言 <ul><li>人为设计的（c语言）</li></ul></li><li>自然语言 <ul><li>人类自然进化 </li><li>无严格语法</li><li>具有歧义性</li><li>知识性</li></ul></li></ul><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><ul><li>编码  <ul><li>词袋模型</li><li>向量模型</li></ul></li></ul><h3 id="自然语言处理发展史"><a href="#自然语言处理发展史" class="headerlink" title="自然语言处理发展史"></a>自然语言处理发展史</h3><ul><li>图灵测试 信息论</li><li>基于规则 规则系统 专家系统</li><li>统计机器学习 SVM 知识图谱</li><li>深度学习 机器翻译 预训练语言模型</li></ul><h3 id="基于规则"><a href="#基于规则" class="headerlink" title="基于规则"></a>基于规则</h3><ul><li>人类制定的规则</li><li>不依赖数据</li><li>计算量大</li><li>语言规则繁多，不易协调</li></ul><h3 id="基于统计"><a href="#基于统计" class="headerlink" title="基于统计"></a>基于统计</h3><ul><li>收集训练语料</li><li>特征工程</li><li>训练模型</li><li>测试集上验证</li></ul><p>案例：</p><ul><li>机器翻译</li><li>搜索引擎</li></ul><h3 id="基于深度学习"><a href="#基于深度学习" class="headerlink" title="基于深度学习"></a>基于深度学习</h3><p>案例：</p><ul><li>Google 神经网络翻译系统</li></ul>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然语言处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打家劫舍问题</title>
      <link href="/2022/08/30/algorithm-02/"/>
      <url>/2022/08/30/algorithm-02/</url>
      
        <content type="html"><![CDATA[<h1 id="打家劫舍问题"><a href="#打家劫舍问题" class="headerlink" title="打家劫舍问题"></a>打家劫舍问题</h1><h2 id="打家劫舍-I"><a href="#打家劫舍-I" class="headerlink" title="打家劫舍 I"></a>打家劫舍 I</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><p>&nbsp;</p><p>示例 1：</p><p>输入：[1,2,3,1]<br>输出：4<br>解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>&nbsp;    偷窃到的最高金额 = 1 + 3 = 4 。</p><p>示例 2：</p><p>输入：[2,7,9,3,1]<br>输出：12<br>解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>&nbsp;    偷窃到的最高金额 = 2 + 9 + 1 = 12 。&nbsp;</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 100<br>0 &lt;= nums[i] &lt;= 400</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/house-robber">https://leetcode.cn/problems/house-robber</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>方法：动态规划</p><ul><li>状态表示：用 dp[i] 代表偷完第i家所能达到的最大金额（i 从 0 开始）</li><li>决策方法：偷到第 i 家时有两种选择，不偷第 i 家或者偷第 i 家。<ul><li>如果不偷第 i 家 dp[i] = dp[i-1]</li><li>如果偷第 i 家，dp[i] = dp[i-2] + 第 i 家的金额</li></ul></li><li>状态转移方程：dp[i] = max(dp[i-1], dp[i-2] + 第 i 家的金额)</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dp[i]代表偷完第i家所能达到的最大金额</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//两种情况：不偷第i家的现金和偷第i家的现金</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打家劫舍-II"><a href="#打家劫舍-II" class="headerlink" title="打家劫舍 II"></a>打家劫舍 II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。</p><p>&nbsp;</p><p>示例&nbsp;1：</p><p>输入：nums = [2,3,2]<br>输出：3<br>解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。<br>示例 2：</p><p>输入：nums = [1,2,3,1]<br>输出：4<br>解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。<br>&nbsp;    偷窃到的最高金额 = 1 + 3 = 4 。<br>示例 3：</p><p>输入：nums = [1,2,3]<br>输出：3&nbsp;</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 100<br>0 &lt;= nums[i] &lt;= 1000</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/house-robber-ii">https://leetcode.cn/problems/house-robber-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>方法：动态规划</p><ul><li>状态表示及状态转移同上一题</li><li>与上一题不同的是，由于偷了第1家就不能偷最后一家，偷了最后一家就不能偷第1家，又分为两种情况<ul><li>从第1家偷到第n-1家的最大金额</li><li>从第2家偷到第n家的最大金额</li></ul></li><li>两者取较大的那个作为最终结果<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//dp1[i]代表偷到第i家所能达到的最大金额(可以偷第一家但不偷最后一家)</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dp1</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        dp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> dp1<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//dp2[i]代表偷到第i家所能达到的最大金额(不能偷第一家但可以偷最后一家)</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dp2</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        dp2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>股票问题</title>
      <link href="/2022/08/30/algorithm-01/"/>
      <url>/2022/08/30/algorithm-01/</url>
      
        <content type="html"><![CDATA[<h1 id="股票问题"><a href="#股票问题" class="headerlink" title="股票问题"></a>股票问题</h1><h2 id="买卖股票的最佳时机-I"><a href="#买卖股票的最佳时机-I" class="headerlink" title="买卖股票的最佳时机 I"></a>买卖股票的最佳时机 I</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个数组 prices ，它的第&nbsp;i 个元素&nbsp;prices[i] 表示一支给定股票第 i 天的价格。</p><p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p><p>&nbsp;</p><p>示例 1：</p><p>输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br>示例 2：</p><p>输入：prices = [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。&nbsp;</p><p>提示：</p><p>1 &lt;= prices.length &lt;= 105<br>0 &lt;= prices[i] &lt;= 104</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用一个变量记录前 0 ~ i - 1 天的最低价，第 i 天的价格减去 0 ~ i - 1 天的最低价即为第 i 天最大利润（i 从 0 开始）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minPrice <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//minPrice表示前i天的最低价</span>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>            minPrice <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minPrice<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="买卖股票的最佳时机-II"><a href="#买卖股票的最佳时机-II" class="headerlink" title="买卖股票的最佳时机 II"></a>买卖股票的最佳时机 II</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 prices ，其中&nbsp;prices[i] 表示某支股票第 i 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候&nbsp;最多&nbsp;只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。</p><p>返回 你能获得的 最大 利润&nbsp;。</p><p>&nbsp;</p><p>示例 1：</p><p>输入：prices = [7,1,5,3,6,4]<br>输出：7<br>解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。<br>&nbsp;    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。<br>     总利润为 4 + 3 = 7 。<br>示例 2：</p><p>输入：prices = [1,2,3,4,5]<br>输出：4<br>解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。<br>&nbsp;    总利润为 4 。<br>示例&nbsp;3：</p><p>输入：prices = [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。&nbsp;</p><p>提示：</p><p>1 &lt;= prices.length &lt;= 3 * 104<br>0 &lt;= prices[i] &lt;= 104</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路1-贪心"><a href="#解题思路1-贪心" class="headerlink" title="解题思路1 贪心"></a>解题思路1 贪心</h3><p>只要明天的价格大于今天的就买今天的股票，在明天卖出，利润等于明天的价格减去今天的价格</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解题思路2-动态规划"><a href="#解题思路2-动态规划" class="headerlink" title="解题思路2 动态规划"></a>解题思路2 动态规划</h3><p>定义状态:</p><ul><li>dp[i][0] 表示第 i 天交易完后手里没有股票的最大利润</li><li>dp[i][1] 表示第 i 天交易完后手里持有一支股票的最大利润（i 从 0 开始）</li></ul><p>状态转移:</p><ul><li>dp[i][0] = max(dp[i-1][1] + prices[i], dp[i-1][0]);</li><li>dp[i][1] = max(dp[i-1][0] - prices[i], dp[i-1][1]);</li></ul><p>解释：</p><ul><li>dp[i-1][1] + prices[i] 表示前一天有股票今天卖股票</li><li>dp[i-1][0] 表示前一天没股票今天不买股票</li><li>dp[i-1][0] - prices[i] 表示前一天没股票今天买股票</li><li>dp[i-1][1] 表示前一天有股票今天不卖股票<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//第i天交易完成后手里没有股票可能有两种情况：前一天有股票今天卖股票 或 前一天没股票今天不买股票</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第i天交易完成后手里有股票可能有两种情况：前一天没股票今天买股票 或 前一天有股票今天不卖股票</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="买卖股票的最佳时机含手续费"><a href="#买卖股票的最佳时机含手续费" class="headerlink" title="买卖股票的最佳时机含手续费"></a>买卖股票的最佳时机含手续费</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给定一个整数数组&nbsp;prices，其中 prices[i]表示第&nbsp;i&nbsp;天的股票价格 ；整数&nbsp;fee 代表了交易股票的手续费用。</p><p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p><p>返回获得利润的最大值。</p><p>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><p>&nbsp;</p><p>示例 1：</p><p>输入：prices = [1, 3, 2, 8, 4, 9], fee = 2<br>输出：8<br>解释：能够达到的最大利润:<br>在此处买入&nbsp;prices[0] = 1<br>在此处卖出 prices[3] = 8<br>在此处买入 prices[4] = 4<br>在此处卖出 prices[5] = 9<br>总利润:&nbsp;((8 - 1) - 2) + ((9 - 4) - 2) = 8<br>示例 2：</p><p>输入：prices = [1,3,7,5,10,3], fee = 3<br>输出：6&nbsp;</p><p>提示：</p><p>1 &lt;= prices.length &lt;= 5 * 104<br>1 &lt;= prices[i] &lt; 5 * 104<br>0 &lt;= fee &lt; 5 * 104</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路-动态规划"><a href="#解题思路-动态规划" class="headerlink" title="解题思路 动态规划"></a>解题思路 动态规划</h3><p>定义状态:</p><ul><li>dp[i][0] 表示第 i 天交易完后手里没有股票的最大利润</li><li>dp[i][1] 表示第 i 天交易完后手里持有一支股票的最大利润（i 从 0 开始）</li></ul><p>和 <strong>买卖股票的最佳时机 II</strong> 不同的是，这题要在卖出的时候支付手续费，因此状态转移方程:</p><ul><li>dp[i][0] = max(dp[i-1][1] + prices[i] - fee, dp[i-1][0]);</li><li>dp[i][1] = max(dp[i-1][0] - prices[i], dp[i-1][1]);</li></ul><p>解释：</p><ul><li>dp[i-1][1] + prices[i] - fee 表示前一天有股票今天卖股票，并在卖出时支付手续费</li><li>dp[i-1][0] 表示前一天没股票今天不买股票</li><li>dp[i-1][0] - prices[i] 表示前一天没股票今天买股票</li><li>dp[i-1][1] 表示前一天有股票今天不卖股票</li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//第i天交易完成后手里没有股票可能有两种情况：前一天有股票今天卖股票(并支付手续费) 或 前一天没股票今天不买股票</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第i天交易完成后手里有股票可能有两种情况：前一天没股票今天买股票 或 前一天有股票今天不卖股票</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳买卖股票时机含冷冻期"><a href="#最佳买卖股票时机含冷冻期" class="headerlink" title="最佳买卖股票时机含冷冻期"></a>最佳买卖股票时机含冷冻期</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给定一个整数数组prices，其中第&nbsp;&nbsp;prices[i]&nbsp;表示第&nbsp;i&nbsp;天的股票价格 。​</p><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p><p>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。<br>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>&nbsp;</p><p>示例 1:</p><p>输入: prices = [1,2,3,0,2]<br>输出: 3<br>解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]<br>示例 2:</p><p>输入: prices = [1]<br>输出: 0&nbsp;</p><p>提示：</p><p>1 &lt;= prices.length &lt;= 5000<br>0 &lt;= prices[i] &lt;= 1000</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路-动态规划-1"><a href="#解题思路-动态规划-1" class="headerlink" title="解题思路 动态规划"></a>解题思路 动态规划</h3><ul><li>定义状态：<ul><li>dp[i][0]: 第 i 天交易完，手上持有股票的最大收益（i 从 0 开始计算）</li><li>dp[i][1]: 第 i 天交易完，手上不持有股票，并且进入冷冻期中的累计最大收益</li><li>dp[i][2]: 第 i 天交易完，手上不持有股票，并且不进入冷冻期中的累计最大收益</li></ul></li><li>状态转移方程1：dp[i][0] = max(dp[i-1][0], dp[i-1][2] - prices[i])<ul><li>dp[i][0] = dp[i-1][0] 表示前一天持有股票并且前一天没有卖出</li><li>dp[i][0] =  dp[i-1][2] - prices[i] 表示前一天交易结束后没有持有股票且没有进入冷冻期，在今天买了股票</li></ul></li><li>状态转移方程2：dp[i][1] = dp[i-1][0] + prices[i];<ul><li>dp[i][1] = dp[i-1][0] + prices[i] 表示前一天交易完有股票，在今天卖出</li></ul></li><li>状态转移方程3：dp[i][2] = max(dp[i-1][1], dp[i-1][2]);<ul><li>dp[i][2] = dp[i-1][1] 表示前一天卖出了股票，进入冷冻期，今天不能买股票</li><li>dp[i][2] = dp[i-1][2] 表示前一天没有卖出了股票，没有进入冷冻期，但今天不买股票</li></ul></li></ul><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// dp[i][0]: 第 i 天交易完，手上持有股票的最大收益（i 从 0 开始计算）</span>        <span class="token comment">// dp[i][1]: 第 i 天交易完，手上不持有股票，并且进入冷冻期中的累计最大收益</span>        <span class="token comment">// dp[i][2]: 第 i 天交易完，手上不持有股票，并且不进入冷冻期中的累计最大收益</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务&amp;索引&amp;三大范式</title>
      <link href="/2022/08/12/datebase-01/"/>
      <url>/2022/08/12/datebase-01/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库中的事务、索引、以及三大范式"><a href="#数据库中的事务、索引、以及三大范式" class="headerlink" title="数据库中的事务、索引、以及三大范式"></a>数据库中的事务、索引、以及三大范式</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务的基本原则-ACID"><a href="#事务的基本原则-ACID" class="headerlink" title="事务的基本原则 ACID"></a>事务的基本原则 ACID</h3><h4 id="原子性-（Atomicity）"><a href="#原子性-（Atomicity）" class="headerlink" title="原子性 （Atomicity）"></a>原子性 （Atomicity）</h4><p>要么都成功，要么都失败</p><h4 id="一致性-（Consistency）"><a href="#一致性-（Consistency）" class="headerlink" title="一致性 （Consistency）"></a>一致性 （Consistency）</h4><p>事务提交后的数据要保持一致</p><h4 id="隔离性-（Isolation）"><a href="#隔离性-（Isolation）" class="headerlink" title="隔离性 （Isolation）"></a>隔离性 （Isolation）</h4><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><h4 id="持久性-（Isolation）"><a href="#持久性-（Isolation）" class="headerlink" title="持久性 （Isolation）"></a>持久性 （Isolation）</h4><p>事务提交后的数据持久化保存在数据库中，提交后不可逆</p><h3 id="隔离所导致的一些问题"><a href="#隔离所导致的一些问题" class="headerlink" title="隔离所导致的一些问题"></a>隔离所导致的一些问题</h3><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>一个事务读取了另一个事务未提交的数据</p><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>一个事务读取表中某一行时，多次读取的结果不同</p><h4 id="虚读或幻读"><a href="#虚读或幻读" class="headerlink" title="虚读或幻读"></a>虚读或幻读</h4><p>在一个事务内读取到了另一个事务插入的数据，导致前后数据读取不一致</p><h3 id="手动模拟事务执行过程"><a href="#手动模拟事务执行过程" class="headerlink" title="手动模拟事务执行过程"></a>手动模拟事务执行过程</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> shop <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span><span class="token keyword">USE</span> shop<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>account<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'账户id'</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账户余额'</span><span class="token punctuation">,</span> <span class="token comment">/*小数点前最多9位，小数点后2位*/</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span><span class="token punctuation">,</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>account<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*模拟事务的执行过程例：转账过程*/</span><span class="token comment">/*关闭自动提交*/</span><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/*开启一个(组)事务*/</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">/*执行事务的多条SQL语句*/</span><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>account<span class="token punctuation">`</span></span> <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span><span class="token operator">-</span><span class="token number">500</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>account<span class="token punctuation">`</span></span> <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span><span class="token operator">+</span><span class="token number">500</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span><span class="token comment">/*提交事务,数据持久化*/</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">/*回滚*/</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span class="token comment">/*开启自动提交*/</span><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><h4 id="主键索引（PRIMARY-KEY）"><a href="#主键索引（PRIMARY-KEY）" class="headerlink" title="主键索引（PRIMARY KEY）"></a>主键索引（PRIMARY KEY）</h4><p>一张数据表只能有一个主键索引，索引列值不允许有空值，通常在创建表时一起创建。</p><h4 id="唯一索引-（UNIQUE-KEY）"><a href="#唯一索引-（UNIQUE-KEY）" class="headerlink" title="唯一索引 （UNIQUE KEY）"></a>唯一索引 （UNIQUE KEY）</h4><p>建立在UNIQUE字段上的索引被称为唯一索引，一张表可以有多个唯一索引，索引列值允许为空，列值中出现多个空值不会发生重复冲突。</p><h4 id="普通索引-（KEY-INDEX）"><a href="#普通索引-（KEY-INDEX）" class="headerlink" title="普通索引 （KEY/INDEX）"></a>普通索引 （KEY/INDEX）</h4><p>建立在普通字段上的索引被称为普通索引。默认为普通索引。</p><h4 id="全文索引-（FULLTEXT）"><a href="#全文索引-（FULLTEXT）" class="headerlink" title="全文索引 （FULLTEXT）"></a>全文索引 （FULLTEXT）</h4><p>部分引擎才有，用于快速定位数据</p><h3 id="使用方法-（创建表时添加或创建表后再添加）"><a href="#使用方法-（创建表时添加或创建表后再添加）" class="headerlink" title="使用方法 （创建表时添加或创建表后再添加）"></a>使用方法 （创建表时添加或创建表后再添加）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 显示索引</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> student<span class="token comment">-- 添加全文索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>school<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> FULLTEXT <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token comment">-- 分析sql执行情况</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span><span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span><span class="token string">'张伟'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="索引原则"><a href="#索引原则" class="headerlink" title="索引原则"></a>索引原则</h3><ul><li>索引不是越多越好</li><li>经常变动的数据不要加索引</li><li>小数据量的表不需要加索引</li><li>索引一般加在经常查询的字段上</li></ul><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><h3 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h3><p>原子性：保证每一列不可再分</p><h3 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h3><p>前提：满足第一范式<br>每张表只描述一个事情</p><h3 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h3><p>前提：满足第一范式和第二范式<br>要确保表的每一列都与主键直接相关，不能间接相关</p><h3 id="规范性-vs-性能"><a href="#规范性-vs-性能" class="headerlink" title="规范性 vs 性能"></a>规范性 vs 性能</h3><ul><li>关联查询的表不能超过三张</li><li>要考虑数据库的性能，有时也可以违反三大范式，故意增加一些冗余列，将多表查询变为单表查询</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> 索引 </tag>
            
            <tag> 三大范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 常用语法</title>
      <link href="/2022/08/12/markdown/"/>
      <url>/2022/08/12/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-常用语法"><a href="#Markdown-常用语法" class="headerlink" title="Markdown 常用语法"></a>Markdown 常用语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 这是一级标题</span><span class="token title important"><span class="token punctuation">##</span> 这是二级标题</span><span class="token title important"><span class="token punctuation">###</span> 这是三级标题</span><span class="token title important"><span class="token punctuation">####</span> 这是四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 这是五级标题</span><span class="token title important"><span class="token punctuation">######</span> 这是六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加粗，斜体，删除线"><a href="#加粗，斜体，删除线" class="headerlink" title="加粗，斜体，删除线"></a>加粗，斜体，删除线</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">这是加粗的文字</span><span class="token punctuation">**</span></span><span class="token italic"><span class="token punctuation">*</span><span class="token content">这是倾斜的文字</span><span class="token punctuation">*</span></span>`<span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">这是斜体加粗的文字</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token strike"><span class="token punctuation">~~</span><span class="token content">这是加删除线的文字</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">超链接名</span>](<span class="token url">超链接地址</span> <span class="token string">"超链接title"</span>)</span>title可加可不加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span>这是引用的内容<span class="token blockquote punctuation">&gt;&gt;</span>这是引用的内容<span class="token blockquote punctuation">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>这是引用的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="无序号列表"><a href="#无序号列表" class="headerlink" title="无序号列表"></a>无序号列表</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 列表内容<span class="token list punctuation">+</span> 列表内容<span class="token list punctuation">*</span> 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="有序号列表"><a href="#有序号列表" class="headerlink" title="有序号列表"></a>有序号列表</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 列表内容<span class="token list punctuation">2.</span> 列表内容<span class="token list punctuation">3.</span> 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">---<span class="token punctuation">----</span></span><span class="token hr punctuation">***</span><span class="token hr punctuation">*****</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性DP例题</title>
      <link href="/2022/08/12/dp-02/"/>
      <url>/2022/08/12/dp-02/</url>
      
        <content type="html"><![CDATA[<h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列&nbsp;是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/longest-increasing-subsequence">https://leetcode.cn/problems/longest-increasing-subsequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//f[i]表示以nums[i]为结尾的上升子序列的长度</span>        <span class="token keyword">int</span> max_len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            max_len <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_len<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max_len<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h2><p>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。<br>要求时间复杂度为O(n)。<br>力扣链接 <a href="https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_sum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//f[i] 表示包含以nums[i]为最后一个元素的子数组的最大和</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            max_sum <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_sum<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max_sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划的基本概念</title>
      <link href="/2022/08/12/dp-01/"/>
      <url>/2022/08/12/dp-01/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划（DP）"><a href="#动态规划（DP）" class="headerlink" title="动态规划（DP）"></a>动态规划（DP）</h1><h2 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h2><ul><li>最优化原理 : 具有最优子结构的性质，一个问题的最优解只取决于子问题的最优解</li><li>无后效性 ：某阶段的状态一旦确定，则此后的演变过程不再受此前各状态和决策的影响</li></ul><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ul><li>划分阶段</li><li>确定状态和状态变量</li><li>确定决策并写出状态转移方程</li><li>寻找边界条件</li><li>设计并实现程序</li></ul><h2 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h2><ul><li>递推 ：从前往后</li><li>递归（记忆化搜索）：从后往前</li></ul><h2 id="不适合用动态规划的情况"><a href="#不适合用动态规划的情况" class="headerlink" title="不适合用动态规划的情况"></a>不适合用动态规划的情况</h2><ul><li>不能划分阶段的题</li><li>不符合最优化原理的题</li><li>不具备无后效性原则的题</li></ul><h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><ul><li>线性动态规划的目标函数为特定变量的线性函数。</li><li>约束是这些变量的线性不等式或等式。</li><li>目的是求目标函数的最大值或最小值。</li></ul><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><ul><li>先算出小区间的最优解，再去得到大区间的最优解。</li><li>用状态f[i][j]表示区间[i,j]的最优解。</li><li>f[i][j]可以由[i,j]的子区间 ([i,k],[k,j]) 得到。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL笔记</title>
      <link href="/2022/08/12/sql-notes/"/>
      <url>/2022/08/12/sql-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-常用命令"><a href="#SQL-常用命令" class="headerlink" title="SQL 常用命令"></a>SQL 常用命令</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--CREATE DATABASE 数据库名</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token identifier"><span class="token punctuation">`</span>school<span class="token punctuation">`</span></span> <span class="token comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */</span> <span class="token comment">/*!80016 DEFAULT ENCRYPTION='N' */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*CREATE TABLE IF NOT EXISTS 表名 (    `字段名` 数据类型 [约束1] [约束2] [约束3] [...] [注释],    `字段名` 数据类型 [约束1] [约束2] [约束3] [...] [注释],    PRIMARY KEY(主键) )ENGINE=引擎名, DEFAULT CHARSET=字符集编码*/</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student1<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>  <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'学号'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'匿名'</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'123456'</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>date<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'注册日期'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="显示表的结构"><a href="#显示表的结构" class="headerlink" title="显示表的结构"></a>显示表的结构</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> <span class="token string">'表名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--ALTER TABLE 旧表名 RENAME AS 新表名</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student1<span class="token punctuation">`</span></span> <span class="token keyword">RENAME</span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="增加表的字段"><a href="#增加表的字段" class="headerlink" title="增加表的字段"></a>增加表的字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--ALTER TABLE 旧表名 ADD 字段名 字段属性...</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'地址'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除表的字段"><a href="#删除表的字段" class="headerlink" title="删除表的字段"></a>删除表的字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span> <span class="token keyword">DROP</span> <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改表的字段"><a href="#修改表的字段" class="headerlink" title="修改表的字段"></a>修改表的字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--修改约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span> <span class="token keyword">MODIFY</span> <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--修改字段名</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span> CHANGE <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token identifier"><span class="token punctuation">`</span>Address<span class="token punctuation">`</span></span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*相同点：都是用来改变字段的属性，change和modify执行成功后都会这本次设置的属性替换字段原属性不同点：重命名只能使用change*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student01<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>FK_gradeid<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>grade<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="DML语言-数据库管理语言"><a href="#DML语言-数据库管理语言" class="headerlink" title="DML语言 (数据库管理语言)"></a>DML语言 (数据库管理语言)</h2><h3 id="增加记录-insert"><a href="#增加记录-insert" class="headerlink" title="增加记录 insert"></a>增加记录 insert</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--INSERT INTO 表名(字段名1,字段名2,字段名3...) VALUES (值1,值2,值3...)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小埋'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更改记录-update"><a href="#更改记录-update" class="headerlink" title="更改记录 update"></a>更改记录 update</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--UPDATE 表名 SET 字段名1=值1[,字段名2=值2,字段名3=值3...] [WHERE 条件1 AND 条件2 AND 条件3...]</span><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span> <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'张三'</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span> <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'123456@qq.com'</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">'张三'</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除记录-delete"><a href="#删除记录-delete" class="headerlink" title="删除记录 delete"></a>删除记录 delete</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--DELETE FROM 表名 [WHERE 条件1 AND 条件2 AND 条件3...]</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">'张三'</span> <span class="token comment">--TRUNCATE TABLE 表名</span><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student2<span class="token punctuation">`</span></span><span class="token comment">/*DELETE FROM 与 TRUNCATE TABLE 的区别DELETE FROM 是一条一条删除记录，不改变自增计数器DELETE FROM 是清空所有记录，自增计数器被重置*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DQL语言-数据库查询语言"><a href="#DQL语言-数据库查询语言" class="headerlink" title="DQL语言 (数据库查询语言)"></a>DQL语言 (数据库查询语言)</h2><h3 id="select-字段名-from-表名"><a href="#select-字段名-from-表名" class="headerlink" title="select 字段名 from 表名"></a>select 字段名 from 表名</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询全部字段</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span><span class="token comment">--查询指定字段</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学生表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AS-关键字用于取别名"><a href="#AS-关键字用于取别名" class="headerlink" title="AS 关键字用于取别名"></a>AS 关键字用于取别名</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 姓名 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学生表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="distinct-关键字用于去除重复数据"><a href="#distinct-关键字用于去除重复数据" class="headerlink" title="distinct 关键字用于去除重复数据"></a>distinct 关键字用于去除重复数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号 <span class="token keyword">FROM</span>  <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="select-表达式-from-表名"><a href="#select-表达式-from-表名" class="headerlink" title="select 表达式 from 表名"></a>select 表达式 from 表名</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--数据库中的表达式：文本值，NULL，函数，字段名，算术表达式，系统变量</span><span class="token keyword">SELECT</span> VERSION<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--数据库版本 （函数）</span><span class="token keyword">SELECT</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">63</span><span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">AS</span> 计算结果 <span class="token comment">--（算术表达式）</span><span class="token keyword">SELECT</span> @<span class="token variable">@auto_increment_increment</span> <span class="token comment">--自增的步长（变量）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数-concat"><a href="#函数-concat" class="headerlink" title="函数 concat"></a>函数 concat</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">'姓名: '</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 姓名 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="where-条件查询"><a href="#where-条件查询" class="headerlink" title="where 条件查询"></a>where 条件查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 成绩 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 成绩 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 成绩 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token operator">BETWEEN</span> <span class="token number">80</span> <span class="token operator">AND</span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 成绩 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token operator">!=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 成绩 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- % 代表零个或多个任意字符, _ 代表一个任意字符</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程号<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程名<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>classhour<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课时 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>subject<span class="token punctuation">`</span></span><span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token string">'%C语言%'</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程号<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程名<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>classhour<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课时 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>subject<span class="token punctuation">`</span></span><span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token string">'高等数学-_'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程号<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程名<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>classhour<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课时 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>subject<span class="token punctuation">`</span></span><span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'高等数学-1'</span><span class="token punctuation">,</span><span class="token string">'高等数学-2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程号<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程名<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>classhour<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课时 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>subject<span class="token punctuation">`</span></span><span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程号<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程名<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>classhour<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课时 <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>subject<span class="token punctuation">`</span></span><span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="联表查询-join-on"><a href="#联表查询-join-on" class="headerlink" title="联表查询 join on"></a>联表查询 join on</h3><h4 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--TableA inner join TableB  从多个表中返回满足 JOIN 条件的所有行</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 姓名<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程号<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程成绩<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--LEFT JOIN 即使右表中没有匹配，也从左表返回所有的行</span><span class="token comment">--例：查询未参加考试的同学</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 姓名<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程号<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程成绩<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> s<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span><span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="right-join"><a href="#right-join" class="headerlink" title="right join"></a>right join</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--RIGHT JOIN 即使左表中没有匹配，也从右表返回所有的行</span><span class="token comment">--例：查询参加考试的学生的所有课程信息及成绩</span><span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span>stu<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 姓名<span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程号<span class="token punctuation">,</span>sub<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程名<span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程成绩<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> stu<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> res <span class="token keyword">ON</span> stu<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>subject<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> sub<span class="token keyword">ON</span> res<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span> <span class="token operator">=</span> sub<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自查询"><a href="#自查询" class="headerlink" title="自查询"></a>自查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> father<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">'父栏目id'</span><span class="token punctuation">,</span>father<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">'父栏目名称'</span><span class="token punctuation">,</span> son<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">'子栏目id'</span><span class="token punctuation">,</span> son<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>categoryname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">'子栏目名称'</span><span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>category<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> father<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>category<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> son<span class="token keyword">WHERE</span> father<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span></span> <span class="token operator">=</span> son<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="排序-order-by-字段名-asc-desc"><a href="#排序-order-by-字段名-asc-desc" class="headerlink" title="排序 order by 字段名 asc/desc"></a>排序 order by 字段名 asc/desc</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">ASC</span> <span class="token comment">--升序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token keyword">DESC</span> <span class="token comment">--降序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分页-limit-起始记录索引-页面记录数"><a href="#分页-limit-起始记录索引-页面记录数" class="headerlink" title="分页 limit 起始记录索引,页面记录数"></a>分页 limit 起始记录索引,页面记录数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>subject<span class="token punctuation">`</span></span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span> <span class="token keyword">ASC</span><span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token comment">--从第一条记录开始，显示5条记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--在where里面可以嵌套select查询的结果</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span><span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> s<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span><span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span><span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span><span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>subject<span class="token punctuation">`</span></span><span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">'高等数学-1'</span> <span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span> <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组及分组过滤"><a href="#分组及分组过滤" class="headerlink" title="分组及分组过滤"></a>分组及分组过滤</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> 课程名<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 平均分<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>studentresult<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 总分<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>subject<span class="token punctuation">`</span></span> s<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>result<span class="token punctuation">`</span></span> r<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>subjectno<span class="token punctuation">`</span></span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token identifier"><span class="token punctuation">`</span>subjectname<span class="token punctuation">`</span></span> <span class="token comment">--分组</span><span class="token keyword">HAVING</span> 平均分 <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token operator">AND</span> 总分 <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token comment">--过滤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数-http-c-biancheng-net-mysql-function"><a href="#常用函数-http-c-biancheng-net-mysql-function" class="headerlink" title="常用函数 http://c.biancheng.net/mysql/function/"></a>常用函数 <a href="http://c.biancheng.net/mysql/function/">http://c.biancheng.net/mysql/function/</a></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 时间</span><span class="token keyword">SELECT</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--当前时间</span><span class="token keyword">SELECT</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token keyword">MONTH</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token keyword">DAY</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token keyword">HOUR</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token keyword">MINUTE</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token keyword">SECOND</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 系统</span><span class="token keyword">SELECT</span> <span class="token keyword">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> VERSION<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><h4 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token comment">--包括了所有的列，相当于行数，在统计结果的时候， 不会忽略列值为NULL  </span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">--包括了忽略所有列，用1代表代码行，在统计结果的时候， 不会忽略列值为NULL  </span><span class="token function">count</span><span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token comment">--只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数， 即某个字段值为NULL时，不统计。</span><span class="token comment">/*列名为主键，count(列名)会比count(1)快  列名不为主键，count(1)会比count(列名)快  如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（*）  如果有主键，则 select count（主键）的执行效率是最优的  如果表只有一个字段，则 select count（*）最优。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> MD5<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MySql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写文章示例</title>
      <link href="/2022/08/11/article-title/"/>
      <url>/2022/08/11/article-title/</url>
      
        <content type="html"><![CDATA[<h1 id="写文章示例"><a href="#写文章示例" class="headerlink" title="写文章示例"></a>写文章示例</h1><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truehide: falsecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
